// This is an autogenerated file from Firebase Genkit.
'use server';
/**
 * @fileOverview Analyzes a video for deepfake elements.
 *
 * - analyzeDeepfake - Analyzes a video for deepfake elements.
 * - AnalyzeDeepfakeInput - The input type for the analyzeDeepfake function.
 * - AnalyzeDeepfakeOutput - The return type for the analyzeDeepfake function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeDeepfakeInputSchema = z.object({
  videoDataUri: z
    .string()
    .describe(
      "A video to analyze, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type AnalyzeDeepfakeInput = z.infer<typeof AnalyzeDeepfakeInputSchema>;

const AnalyzeDeepfakeOutputSchema = z.object({
  isDeepfake: z.boolean().describe('Whether the video contains deepfake elements.'),
  confidence: z.number().describe('The confidence level of the deepfake detection (0-1).'),
  analysis: z.string().describe('A detailed analysis of the video for deepfake elements.'),
});
export type AnalyzeDeepfakeOutput = z.infer<typeof AnalyzeDeepfakeOutputSchema>;

export async function analyzeDeepfake(input: AnalyzeDeepfakeInput): Promise<AnalyzeDeepfakeOutput> {
  return analyzeDeepfakeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeDeepfakePrompt',
  input: {schema: AnalyzeDeepfakeInputSchema},
  output: {schema: AnalyzeDeepfakeOutputSchema},
  prompt: `You are an expert in deepfake detection. Analyze the provided video for deepfake elements and provide a detailed analysis.

Video: {{media url=videoDataUri}}

Respond in a JSON format matching the schema. The isDeepfake field should be true if deepfake elements are detected, and the confidence field should reflect the confidence level of the detection (0-1). The analysis field should contain a detailed explanation of the analysis process and the evidence found.
`,
});

const analyzeDeepfakeFlow = ai.defineFlow(
  {
    name: 'analyzeDeepfakeFlow',
    inputSchema: AnalyzeDeepfakeInputSchema,
    outputSchema: AnalyzeDeepfakeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
